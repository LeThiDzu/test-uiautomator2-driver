name: Functional Tests

on:
  pull_request:
    branches:
    - master
    paths-ignore:
    - 'docs/**'
    - '*.md'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
        - apiLevel: 34
          emuTag: google_apis
          arch: x86_64
          androidVer: 14
        - apiLevel: 35
          emuTag: google_apis
          arch: x86_64
          androidVer: 15

    env:
      CI: true
      PLATFORM_NAME: Android
      PLATFORM_VERSION: ${{ matrix.androidVer }}
      DEVICE_NAME: emulator-5554
      APP_PACKAGE: io.appium.android.apis
      APP_ACTIVITY: io.appium.android.apis.ApiDemos
      AUTOMATION_NAME: uiautomator2
      PATH_TO_APK: ${{ github.workspace }}/apks/ApiDemos_debug.apk
      APK_LINK: ${{ secrets.APK_LINK }}
      ANDROID_AVD: emulator
      APPIUM_TEST_SERVER_PORT: 4567
      APPIUM_TEST_SERVER_HOST: 127.0.0.1
      _FORCE_LOGS: 1
      TEST_PASS_THRESHOLD: 10
    # No hardware acceleration is available for emulators on Ubuntu:
    # https://github.com/marketplace/actions/android-emulator-runner#can-i-use-this-action-on-linux-vms
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: lts/*
        check-latest: true
    - run: curl -sSL https://bit.ly/install-xq | sudo bash
    - run: |
        npm install mocha-multi-reporters --save-dev
        npm install -g appium
        npm install --no-save mjpeg-consumer
      name: Install dev dependencies
    - uses: actions/setup-python@v5
      id: setup_python
      with:
        python-version: '3.8.12'

    - uses: actions/cache/restore@v4
      with:
        key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
        path: venv

    - name: Install Python packages
      run: |
        python -m venv venv
        pip install virtualenv
        source venv/bin/activate
        python -m pip install -r requirements.txt
        npm install -g allure-commandline --save-dev

    - name: Save cached venv
      uses: actions/cache/save@v4
      with:
        key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
        path: venv

    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ matrix.apiLevel }}
    - name: create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        avd-name: ${{ env.ANDROID_AVD }}
        force-avd-creation: false
        api-level: ${{ matrix.apiLevel }}
        disable-spellchecker: true
        target: ${{ matrix.emuTag }}
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
        arch: ${{ matrix.arch }}
        disable-animations: true
        script: echo "Generated AVD snapshot for caching."
    - run: |
        cwd=$(pwd)
        pushd "$cwd"
        cd ~
        appium driver install --source=local "$cwd"
        appium driver doctor uiautomator2
        nohup appium server \
          --port=$APPIUM_TEST_SERVER_PORT \
          --address=$APPIUM_TEST_SERVER_HOST \
          --relaxed-security \
          --log-no-colors \
          --log-timestamp \
          2>&1 > "$cwd/appium.log" &
        popd
      name: Start Appium server
    - run: nohup adb logcat > logcat.log &
      name: Capture logcat
    - uses: reactivecircus/android-emulator-runner@v2
      name: e2e_api${{ matrix.apiLevel }}
      with:
        script: bash -xe scripts/run-functional-tests.sh
        avd-name: ${{ env.ANDROID_AVD }}
        force-avd-creation: false
        api-level: ${{ matrix.apiLevel }}
        disable-spellchecker: true
        disable-animations: true
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
        target: ${{ matrix.emuTag }}
        arch: ${{ matrix.arch }}
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test_record
        path: ./TestRecord-${{ matrix.androidVer }}/

    - name: Generate allure report
      if: always()
      run: |
        allure generate ./output/allure/ --clean -o ./allure-report/
        sed -i 's|href="|href="./|g' ./allure-report/index.html
        sed -i 's|src="|src="./|g' ./allure-report/index.html

    - name: Push report
      if: always()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: ./allure-report/
        destination_dir: ${{ matrix.androidVer }}